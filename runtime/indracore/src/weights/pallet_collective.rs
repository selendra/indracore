// Copyright 2017-2020 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.0
//! DATE: 2020-12-08, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("indracore-dev"), DB CACHE: 128

// Executed Command:
// target/release/indracore
// benchmark
// --chain=indracore-dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/indracore/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_collective.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
    fn set_members(m: u32, n: u32, p: u32) -> Weight {
        0_u64
            // Standard Error: 9_000
            .saturating_add(20_774_000_u64.saturating_mul(m as Weight))
            // Standard Error: 9_000
            .saturating_add(140_000_u64.saturating_mul(n as Weight))
            // Standard Error: 9_000
            .saturating_add(28_269_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads(1_u64.saturating_mul(p as Weight)))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64.saturating_mul(p as Weight)))
    }
    fn execute(b: u32, m: u32) -> Weight {
        31_199_000_u64
            // Standard Error: 0
            .saturating_add(4_000_u64.saturating_mul(b as Weight))
            // Standard Error: 0
            .saturating_add(112_000_u64.saturating_mul(m as Weight))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn propose_execute(b: u32, m: u32) -> Weight {
        38_299_000_u64
            // Standard Error: 0
            .saturating_add(4_000_u64.saturating_mul(b as Weight))
            // Standard Error: 0
            .saturating_add(226_000_u64.saturating_mul(m as Weight))
            .saturating_add(T::DbWeight::get().reads(2_u64))
    }
    fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
        62_096_000_u64
            // Standard Error: 0
            .saturating_add(5_000_u64.saturating_mul(b as Weight))
            // Standard Error: 0
            .saturating_add(120_000_u64.saturating_mul(m as Weight))
            // Standard Error: 0
            .saturating_add(595_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    fn vote(m: u32) -> Weight {
        44_252_000_u64
            // Standard Error: 0
            .saturating_add(286_000_u64.saturating_mul(m as Weight))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn close_early_disapproved(m: u32, p: u32) -> Weight {
        59_479_000_u64
            // Standard Error: 0
            .saturating_add(221_000_u64.saturating_mul(m as Weight))
            // Standard Error: 0
            .saturating_add(549_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
        85_690_000_u64
            // Standard Error: 0
            .saturating_add(4_000_u64.saturating_mul(b as Weight))
            // Standard Error: 0
            .saturating_add(223_000_u64.saturating_mul(m as Weight))
            // Standard Error: 0
            .saturating_add(555_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    fn close_disapproved(m: u32, p: u32) -> Weight {
        65_935_000_u64
            // Standard Error: 0
            .saturating_add(225_000_u64.saturating_mul(m as Weight))
            // Standard Error: 0
            .saturating_add(554_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    fn close_approved(b: u32, m: u32, p: u32) -> Weight {
        92_386_000_u64
            // Standard Error: 0
            .saturating_add(3_000_u64.saturating_mul(b as Weight))
            // Standard Error: 0
            .saturating_add(224_000_u64.saturating_mul(m as Weight))
            // Standard Error: 0
            .saturating_add(562_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    fn disapprove_proposal(p: u32) -> Weight {
        34_916_000_u64
            // Standard Error: 0
            .saturating_add(557_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}
