// Copyright 2017-2020 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for pallet_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.0
//! DATE: 2020-12-09, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("indracore-dev"), DB CACHE: 128

// Executed Command:
// target/release/indracore
// benchmark
// --chain=indracore-dev
// --steps=50
// --repeat=20
// --pallet=pallet_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/indracore/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_staking.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
    fn bond() -> Weight {
        98_601_000_u64
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    fn bond_extra() -> Weight {
        78_522_000_u64
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn unbond() -> Weight {
        70_546_000_u64
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    fn withdraw_unbonded_update(s: u32) -> Weight {
        71_228_000_u64
            // Standard Error: 0
            .saturating_add(33_000_u64.saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    fn withdraw_unbonded_kill(s: u32) -> Weight {
        116_427_000_u64
            // Standard Error: 1_000
            .saturating_add(4_046_000_u64.saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64.saturating_mul(s as Weight)))
    }
    fn validate() -> Weight {
        24_212_000_u64
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn nominate(n: u32) -> Weight {
        31_922_000_u64
            // Standard Error: 12_000
            .saturating_add(418_000_u64.saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn chill() -> Weight {
        24_183_000_u64
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn set_payee() -> Weight {
        16_569_000_u64
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn set_controller() -> Weight {
        35_580_000_u64
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    fn set_validator_count() -> Weight {
        3_217_000_u64.saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn force_no_eras() -> Weight {
        3_688_000_u64.saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn force_new_era() -> Weight {
        3_739_000_u64.saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn force_new_era_always() -> Weight {
        3_611_000_u64.saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn set_invulnerables(v: u32) -> Weight {
        3_864_000_u64
            // Standard Error: 0
            .saturating_add(9_000_u64.saturating_mul(v as Weight))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn force_unstake(s: u32) -> Weight {
        78_757_000_u64
            // Standard Error: 1_000
            .saturating_add(4_037_000_u64.saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64.saturating_mul(s as Weight)))
    }
    fn cancel_deferred_slash(s: u32) -> Weight {
        5_845_293_000_u64
            // Standard Error: 388_000
            .saturating_add(34_621_000_u64.saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn payout_stakers_dead_controller(n: u32) -> Weight {
        142_251_000_u64
            // Standard Error: 11_000
            .saturating_add(60_125_000_u64.saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().reads(3_u64.saturating_mul(n as Weight)))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64.saturating_mul(n as Weight)))
    }
    fn payout_stakers_alive_staked(n: u32) -> Weight {
        172_317_000_u64
            // Standard Error: 17_000
            .saturating_add(78_585_000_u64.saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(12_u64))
            .saturating_add(T::DbWeight::get().reads(5_u64.saturating_mul(n as Weight)))
            .saturating_add(T::DbWeight::get().writes(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64.saturating_mul(n as Weight)))
    }
    fn rebond(l: u32) -> Weight {
        48_379_000_u64
            // Standard Error: 1_000
            .saturating_add(109_000_u64.saturating_mul(l as Weight))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    fn set_history_depth(e: u32) -> Weight {
        0_u64
            // Standard Error: 64_000
            .saturating_add(39_072_000_u64.saturating_mul(e as Weight))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64.saturating_mul(e as Weight)))
    }
    fn reap_stash(s: u32) -> Weight {
        100_021_000_u64
            // Standard Error: 1_000
            .saturating_add(4_046_000_u64.saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64.saturating_mul(s as Weight)))
    }
    fn new_era(v: u32, n: u32) -> Weight {
        0_u64
            // Standard Error: 759_000
            .saturating_add(751_624_000_u64.saturating_mul(v as Weight))
            // Standard Error: 38_000
            .saturating_add(106_491_000_u64.saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().reads(4_u64.saturating_mul(v as Weight)))
            .saturating_add(T::DbWeight::get().reads(3_u64.saturating_mul(n as Weight)))
            .saturating_add(T::DbWeight::get().writes(8_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64.saturating_mul(v as Weight)))
    }
    fn submit_solution_better(v: u32, n: u32, a: u32, w: u32) -> Weight {
        0_u64
            // Standard Error: 44_000
            .saturating_add(1_321_000_u64.saturating_mul(v as Weight))
            // Standard Error: 17_000
            .saturating_add(535_000_u64.saturating_mul(n as Weight))
            // Standard Error: 44_000
            .saturating_add(102_449_000_u64.saturating_mul(a as Weight))
            // Standard Error: 91_000
            .saturating_add(7_907_000_u64.saturating_mul(w as Weight))
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().reads(4_u64.saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().reads(1_u64.saturating_mul(w as Weight)))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}
