// Copyright 2017-2020 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.0
//! DATE: 2020-12-09, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("indracore-dev"), DB CACHE: 128

// Executed Command:
// target/release/indracore
// benchmark
// --chain=indracore-dev
// --steps=50
// --repeat=20
// --pallet=pallet_proxy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/indracore/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_proxy.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
    fn proxy(p: u32) -> Weight {
        31_560_000_u64
            // Standard Error: 1_000
            .saturating_add(190_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn proxy_announced(a: u32, p: u32) -> Weight {
        65_555_000_u64
            // Standard Error: 1_000
            .saturating_add(843_000_u64.saturating_mul(a as Weight))
            // Standard Error: 1_000
            .saturating_add(194_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn remove_announcement(a: u32, p: u32) -> Weight {
        41_808_000_u64
            // Standard Error: 1_000
            .saturating_add(842_000_u64.saturating_mul(a as Weight))
            // Standard Error: 1_000
            .saturating_add(10_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn reject_announcement(a: u32, p: u32) -> Weight {
        41_713_000_u64
            // Standard Error: 1_000
            .saturating_add(847_000_u64.saturating_mul(a as Weight))
            // Standard Error: 1_000
            .saturating_add(12_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn announce(a: u32, p: u32) -> Weight {
        66_579_000_u64
            // Standard Error: 1_000
            .saturating_add(730_000_u64.saturating_mul(a as Weight))
            // Standard Error: 1_000
            .saturating_add(199_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn add_proxy(p: u32) -> Weight {
        44_930_000_u64
            // Standard Error: 1_000
            .saturating_add(206_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn remove_proxy(p: u32) -> Weight {
        40_436_000_u64
            // Standard Error: 1_000
            .saturating_add(241_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn remove_proxies(p: u32) -> Weight {
        38_695_000_u64
            // Standard Error: 1_000
            .saturating_add(191_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn anonymous(p: u32) -> Weight {
        64_695_000_u64
            // Standard Error: 1_000
            .saturating_add(13_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn kill_anonymous(p: u32) -> Weight {
        41_503_000_u64
            // Standard Error: 1_000
            .saturating_add(192_000_u64.saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
